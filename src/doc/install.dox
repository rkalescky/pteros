/** \page install Installation

\tableofcontents

\section port 	Portability

Pteros is currently being developed on Linux Mint with gcc and clang compilers. Design decisions are made with portability to Linux, Windows and MacOS in mind but no testing on Windows and MacOS are made. Other systems were never considered. The code itself should be 100% portable providing that the dependencies are available for your system, but expect platform-dependent quirks and issues, which are common to all complex C++ programs, not only to Pteros.

\note
If you managed to compile Pteros on MacOS, please share your experience because we have no Mac machines to perform the tests.

\note
You are wellcome to provide a guide for compiling Pteros on Windows. I maintained such guide some time ago but now I have no interest in this since I'm not doing any development on Windows.

\warning
Intel ICC compiler was tested in the past on Linux, but was giving poor performance. Compiling with Intel MKL worked, but gave broken Python bindings. No testing with recent versions was performed.


\section depend     Dependencies

\warning Current version of Pteros is 3.x. It depends on C++17 features and requires sufficiently modern compiler. If you are still limited by old compiler use branch v2 which is outdated but requires only C++11.

The prerequisites for compilation of Pteros are the following.

Core dependencies, that should be installed separately:
- Standard-conforming C and C++17 compilers (tested with gcc>=9.0, clang>=10.0).
- <a href="http://www.cmake.org/">cmake</a> 3.10 or higher.
- <a href="http://www.boost.org/">boost</a> 1.50 or higher.
- <a href="http://git-scm.com/">Git</a> for getting the source code.
- <a href="https://www.python.org/">Python</a> 3.5 or higher (optional, needed for compiling dynamic plugins and python bindings).

Dependencies, which are pulled in automatically by Pteros, but could also be used if installed system-wide:
- <a href="http://eigen.tuxfamily.org/index.php?title=Main_Page">Eigen</a> linear algebra library (>=3.2).
- <a href="https://github.com/gabime/spdlog">spdlog</a> Logging and text formatting library.
- <a href="https://github.com/pybind/pybind11">Pybind11</a> binding generator library (optional, only needed for python bindings).

Optional dependencies:

- <a href="http://www.gromacs.org/">Gromacs</a> version 2016.x or higher (for reading Gromacs TPR files and using Gromacs topologies).
- <a href="https://github.com/openbabel/openbabel">OpenBabel</a> version 2.4 or higher (for reading MOL2 and PDBQT files, performing substructure search, determinign molecular symmetry).


For building documentation (don't needed unless you want to contribute to the docs):
- <a href="www.doxygen.org">Doxygen</a>
- <a href="http://sphinx-doc.org/">Sphinx</a>

If you are using latest Ubuntu or other debian-based system it should be enough to run the following command in the terminal to install basic dependencies:
\code{.unparsed}
sudo apt-get install g++ cmake libeigen3-dev libboost-all-dev python3-dev python3-numpy pybind11-dev git doxygen python-sphinx
\endcode

\warning
- It is highly recommended to install Gromacs it from source because version in the repositories is usually outdated. Even if you prefer to use the version from repositories, you <b>must</b> download Gromacs source code matching your version because recent versions of Gromacs do not install all necessary low-level headers, which are used by Pteros.
- In various versions of Ubuntu the spdlog package is corrupted and lacks some necessary files, thus is it advised not to install it system-wide and let Pteros to pull it from git repository automatically instead.
- OpenBabel have to be install from source in Ubuntu 16.x and 18.x (and probably in later versions as well) because repository packages are corrupted and lack some header files. Do not install dev packege from repositories - it won't work! Your milleage in other linuxes may vary depending on the package quality. Compiled version of OpenBabel does not interfere with system version if installed to /usr/local (default).
\code{.unparsed}
git clone https://github.com/openbabel/openbabel.git
mkdir openbabel-build
cd openbabel-build
cmake ../openbabel
sudo make install
\endcode
- In older Ubuntu releases pybind11 is not packaged so you should let Pteros to pull it in automatically (recommended) or install it yourself from source:
\code{.unparsed}
git clone https://github.com/pybind/pybind11.git
mkdir pybind11-build
cd pybind11-build
cmake ../pybind11 -DPYBIND11_TEST=OFF
sudo make install
\endcode

\section build	Building Pteros

\subsection get Getting the code

Get the latest source code from the Git repository:
\code{.unparsed}
git clone https://github.com/yesint/pteros.git pteros
\endcode
This will create a directory named "pteros" in you current working directory and will download the source code into it.

\note Use branch v2 if you need older version which compiles by C++11 compilers.

\subsection compile Compiling
Create a separate build directory (for example 'pteros_build'). Go to this directory and issue the following commands:

\code{.unparsed}
cmake <path to Pteros source directory> -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=<where to install Pteros> -DWITH_GROMACS=OFF
make
make install
\endcode

\note If you need ability to read Gromacs files see \ref gmx.

\warning The 'make install' command may require root access if you are installing into the system-wide location.

The cmake command will print something like this:
\code{.unparsed}
------------------------------
IMPORTANT!
In order to be able to link with` Pteros and to use Pteros Python modules
you have to source the pterosrc file in your bash shell:
source /home/user/programs/pteros/lib/pterosrc
------------------------------
\endcode

Copy suggested line and add it to your .bashrc file (it is assumed that bash shell is used. If it is not the case use the syntax of your actual shell instead).

If you want to compile with alternative compiler (for example Clang), add the following flags to cmake invocation:
\code{.unparsed}
-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
\endcode

If both Python 3.x and 2.7 are installed in your system the version 3.x will be used automatically (even if 2.7 if the system-default, like in Ubuntu).

\note Make sure that you use correct python interpreter! In Ubuntu always use python3 with Pteros.

\subsection deb  Building .deb package

Another way of installing Pteros system-wide in a debian-based system is to build a .deb package and to install it in usual way:
\code{.unparsed}
cmake <all needed flags>
make package   #This produces file pteros-<version>.deb
sudo dpkg -i pteros-<version>.deb
\endcode

\warning This method is only tested from time to time. Manual installation with "make install" is currently more reliable.


\subsection test Testing installation

Run the following command:
\code{.unparsed}
pteros_analysis.py --help all
\endcode

If you see any errors then Pteros can't load plugins or something elese went wrong.

\note This is only applicable if you are building with Python support!

\subsection sasa SASA code

Pteros performs the Solvent Accesible Surface Area (SASA) computatations using POWERSASA code developed in the <a href="http://www.kit.edu/english/">Karlsruhe Institute of Technology</a>. POWERSASA is licensed by specific and rather restrictive "Academic/Non-Profit SASA software license agreement".
See the comment file `thirdparty/sasa/LICENSE` for details.
This license is NOT Open Source and implies many restrictions. I contacted the authors of POWERSASA several times and asked for official permision to use their code but got no reply. It seems that the project is abandoned and nobody is concerned about the licensing of POWERSASA for many years.
If you still don't want to use this code due to licensing concerns, you can swith it off:
\code{.unparsed}
-DWITH_POWERSASA=OFF
\endcode

\subsection gmx Enabling Gromacs support

Pteros could be linked against Gromacs. In this case it can read Gromacs TPR files and make advantage of Gromacs topologies.

Unfortunately Gromacs developers changed the public API dramatically starting from version 2020.x, while Pteros still needs some low-level facilities which are now not exposed in the installed headers. There are also bugs in Gromacs CMake files, which prevents it from being discovered and imported normally. Due to all these complications linking with Gromacs bocomes a bit more involved than it should be:
- In addition to normal Gromacs installation you need a source code matching exactly the version installed.
- You need to use the following CMake flags:
\code{.unparsed} -DWITH_GROMACS=ON -DGROMACS_SOURCE=<path to gromacs source tree> -DGROMACS_LIBRARIES=<path to installed gromacs libs> \endcode


\subsection no_python 	Building without Python

Pteros could be build without Python by specifying the following flag:

\code{.unparsed} -DWITH_PYTHON="OFF" \endcode

In this case compiled C++ plugins are not built as python extension modules and python bindings are not produced.

\subsection standalone Building standalone analysis plugins

Compiled analysis plugins, which are written in C++, are compiled as Python extensions by default. However, it is possible to build each plugin as a separate standalone program, which does not depend on Python, by adding the following flag to CMake:

\code{.unparsed} -DSTANDALONE_PLUGINS=ON \endcode

If you want to build plugins as the standalone programs AND as python extensions at the same time use the following flags:
\code{.unparsed}
cmake <usual options> -DWITH_PYTHON=ON -DSTANDALONE_PLUGINS=ON
make
make install
\endcode

\note
In this case each plugin will be compiled twice, so expect longer compilation time.

\subsection no_omp Building Pteros without OpenMP

By default Pteros is compiled with OpenMP paralellization for many internal operations. However, on certain computational clusters the usage of OpenMP is prohibited. There are also other situations when you may want to disable OpenMP. Use the following flag to compile without OpenMP:

\code{.unparsed}
cmake <usual options> -DWITH_OPENMP=OFF
\endcode


\section trouble Reporting bugs

Use <a href="https://github.com/yesint/pteros/issues">issues on Github</a> to report bugs.

\subsection known_problems Known problems
- Linking with `libopenbabel-dev` installed from repositories fails in Ubuntu 16.x and 18.x due to corrupted headers in the package. Compile OpenBabel from source instead.
- Clang compiler doesn't work with Boost < 1.52
- OpenMP in clang only works for clang++ >= 3.8 and if libomp is installed: `sudo apt-get install libomp-dev`
- If there are several Boost versions in the system CMake may find the right one for one library but the wrong one for the other, which causes very strange errors. The solution is to include the following flags to CMake invocation:
\code{.unparsed} -DBoost_NO_SYSTEM_PATHS=ON -DBOOST_ROOT="Correct path to boost" \endcode
- All Pteros plugins have to be up to date with the main library, but CMake doesn't always ensure this if you pull new updates from the repository. If plugins suddenly stop working after update delete CMakeCache.txt and CMakeFiles and recompile.
- The error <i>"trying to overwrite '/usr/include/spdlog/async_logger.h', which is also in package libspdlog-dev 1.6-1"</i> occurs during installation. This happens if you have `spdlog` installed system-wide in Ubuntu from the package `libspdlog-dev`. This package is built in a wrong way and it lacks `spdlogConfig.cmake` file needed for correct library detection. That is why Pteros can't see it and tries to install its own bundled version of spdlog. Use `INSTALL_INTERNAL_SPDLOG=OFF` as a workaround.
*/
